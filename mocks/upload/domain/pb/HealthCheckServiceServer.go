// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	emptypb "google.golang.org/protobuf/types/known/emptypb"

	pb "graph-analyzer/api/upload/domain/pb"
)

// HealthCheckServiceServer is an autogenerated mock type for the HealthCheckServiceServer type
type HealthCheckServiceServer struct {
	mock.Mock
}

type HealthCheckServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *HealthCheckServiceServer) EXPECT() *HealthCheckServiceServer_Expecter {
	return &HealthCheckServiceServer_Expecter{mock: &_m.Mock}
}

// Check provides a mock function with given fields: _a0, _a1
func (_m *HealthCheckServiceServer) Check(_a0 context.Context, _a1 *emptypb.Empty) (*pb.HealthCheckResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *pb.HealthCheckResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *emptypb.Empty) (*pb.HealthCheckResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *emptypb.Empty) *pb.HealthCheckResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.HealthCheckResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *emptypb.Empty) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HealthCheckServiceServer_Check_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Check'
type HealthCheckServiceServer_Check_Call struct {
	*mock.Call
}

// Check is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *emptypb.Empty
func (_e *HealthCheckServiceServer_Expecter) Check(_a0 interface{}, _a1 interface{}) *HealthCheckServiceServer_Check_Call {
	return &HealthCheckServiceServer_Check_Call{Call: _e.mock.On("Check", _a0, _a1)}
}

func (_c *HealthCheckServiceServer_Check_Call) Run(run func(_a0 context.Context, _a1 *emptypb.Empty)) *HealthCheckServiceServer_Check_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*emptypb.Empty))
	})
	return _c
}

func (_c *HealthCheckServiceServer_Check_Call) Return(_a0 *pb.HealthCheckResponse, _a1 error) *HealthCheckServiceServer_Check_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HealthCheckServiceServer_Check_Call) RunAndReturn(run func(context.Context, *emptypb.Empty) (*pb.HealthCheckResponse, error)) *HealthCheckServiceServer_Check_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedHealthCheckServiceServer provides a mock function with given fields:
func (_m *HealthCheckServiceServer) mustEmbedUnimplementedHealthCheckServiceServer() {
	_m.Called()
}

// HealthCheckServiceServer_mustEmbedUnimplementedHealthCheckServiceServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedHealthCheckServiceServer'
type HealthCheckServiceServer_mustEmbedUnimplementedHealthCheckServiceServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedHealthCheckServiceServer is a helper method to define mock.On call
func (_e *HealthCheckServiceServer_Expecter) mustEmbedUnimplementedHealthCheckServiceServer() *HealthCheckServiceServer_mustEmbedUnimplementedHealthCheckServiceServer_Call {
	return &HealthCheckServiceServer_mustEmbedUnimplementedHealthCheckServiceServer_Call{Call: _e.mock.On("mustEmbedUnimplementedHealthCheckServiceServer")}
}

func (_c *HealthCheckServiceServer_mustEmbedUnimplementedHealthCheckServiceServer_Call) Run(run func()) *HealthCheckServiceServer_mustEmbedUnimplementedHealthCheckServiceServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *HealthCheckServiceServer_mustEmbedUnimplementedHealthCheckServiceServer_Call) Return() *HealthCheckServiceServer_mustEmbedUnimplementedHealthCheckServiceServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *HealthCheckServiceServer_mustEmbedUnimplementedHealthCheckServiceServer_Call) RunAndReturn(run func()) *HealthCheckServiceServer_mustEmbedUnimplementedHealthCheckServiceServer_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewHealthCheckServiceServer interface {
	mock.TestingT
	Cleanup(func())
}

// NewHealthCheckServiceServer creates a new instance of HealthCheckServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHealthCheckServiceServer(t mockConstructorTestingTNewHealthCheckServiceServer) *HealthCheckServiceServer {
	mock := &HealthCheckServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
