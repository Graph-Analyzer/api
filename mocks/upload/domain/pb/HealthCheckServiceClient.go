// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"
	emptypb "google.golang.org/protobuf/types/known/emptypb"

	mock "github.com/stretchr/testify/mock"

	pb "graph-analyzer/api/upload/domain/pb"
)

// HealthCheckServiceClient is an autogenerated mock type for the HealthCheckServiceClient type
type HealthCheckServiceClient struct {
	mock.Mock
}

type HealthCheckServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *HealthCheckServiceClient) EXPECT() *HealthCheckServiceClient_Expecter {
	return &HealthCheckServiceClient_Expecter{mock: &_m.Mock}
}

// Check provides a mock function with given fields: ctx, in, opts
func (_m *HealthCheckServiceClient) Check(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*pb.HealthCheckResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 *pb.HealthCheckResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *emptypb.Empty, ...grpc.CallOption) (*pb.HealthCheckResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *emptypb.Empty, ...grpc.CallOption) *pb.HealthCheckResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*pb.HealthCheckResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *emptypb.Empty, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HealthCheckServiceClient_Check_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Check'
type HealthCheckServiceClient_Check_Call struct {
	*mock.Call
}

// Check is a helper method to define mock.On call
//   - ctx context.Context
//   - in *emptypb.Empty
//   - opts ...grpc.CallOption
func (_e *HealthCheckServiceClient_Expecter) Check(ctx interface{}, in interface{}, opts ...interface{}) *HealthCheckServiceClient_Check_Call {
	return &HealthCheckServiceClient_Check_Call{Call: _e.mock.On("Check",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *HealthCheckServiceClient_Check_Call) Run(run func(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption)) *HealthCheckServiceClient_Check_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*emptypb.Empty), variadicArgs...)
	})
	return _c
}

func (_c *HealthCheckServiceClient_Check_Call) Return(_a0 *pb.HealthCheckResponse, _a1 error) *HealthCheckServiceClient_Check_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *HealthCheckServiceClient_Check_Call) RunAndReturn(run func(context.Context, *emptypb.Empty, ...grpc.CallOption) (*pb.HealthCheckResponse, error)) *HealthCheckServiceClient_Check_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewHealthCheckServiceClient interface {
	mock.TestingT
	Cleanup(func())
}

// NewHealthCheckServiceClient creates a new instance of HealthCheckServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHealthCheckServiceClient(t mockConstructorTestingTNewHealthCheckServiceClient) *HealthCheckServiceClient {
	mock := &HealthCheckServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
