// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	repository "graph-analyzer/api/repository"

	mock "github.com/stretchr/testify/mock"
)

// GraphRepository is an autogenerated mock type for the GraphRepository type
type GraphRepository struct {
	mock.Mock
}

type GraphRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *GraphRepository) EXPECT() *GraphRepository_Expecter {
	return &GraphRepository_Expecter{mock: &_m.Mock}
}

// GetAverageClusteringCoefficient provides a mock function with given fields:
func (_m *GraphRepository) GetAverageClusteringCoefficient() repository.AverageClusteringCoefficientItem {
	ret := _m.Called()

	var r0 repository.AverageClusteringCoefficientItem
	if rf, ok := ret.Get(0).(func() repository.AverageClusteringCoefficientItem); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(repository.AverageClusteringCoefficientItem)
	}

	return r0
}

// GraphRepository_GetAverageClusteringCoefficient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAverageClusteringCoefficient'
type GraphRepository_GetAverageClusteringCoefficient_Call struct {
	*mock.Call
}

// GetAverageClusteringCoefficient is a helper method to define mock.On call
func (_e *GraphRepository_Expecter) GetAverageClusteringCoefficient() *GraphRepository_GetAverageClusteringCoefficient_Call {
	return &GraphRepository_GetAverageClusteringCoefficient_Call{Call: _e.mock.On("GetAverageClusteringCoefficient")}
}

func (_c *GraphRepository_GetAverageClusteringCoefficient_Call) Run(run func()) *GraphRepository_GetAverageClusteringCoefficient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GraphRepository_GetAverageClusteringCoefficient_Call) Return(_a0 repository.AverageClusteringCoefficientItem) *GraphRepository_GetAverageClusteringCoefficient_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GraphRepository_GetAverageClusteringCoefficient_Call) RunAndReturn(run func() repository.AverageClusteringCoefficientItem) *GraphRepository_GetAverageClusteringCoefficient_Call {
	_c.Call.Return(run)
	return _c
}

// GetConnected provides a mock function with given fields:
func (_m *GraphRepository) GetConnected() repository.ConnectedItem {
	ret := _m.Called()

	var r0 repository.ConnectedItem
	if rf, ok := ret.Get(0).(func() repository.ConnectedItem); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(repository.ConnectedItem)
	}

	return r0
}

// GraphRepository_GetConnected_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetConnected'
type GraphRepository_GetConnected_Call struct {
	*mock.Call
}

// GetConnected is a helper method to define mock.On call
func (_e *GraphRepository_Expecter) GetConnected() *GraphRepository_GetConnected_Call {
	return &GraphRepository_GetConnected_Call{Call: _e.mock.On("GetConnected")}
}

func (_c *GraphRepository_GetConnected_Call) Run(run func()) *GraphRepository_GetConnected_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GraphRepository_GetConnected_Call) Return(_a0 repository.ConnectedItem) *GraphRepository_GetConnected_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GraphRepository_GetConnected_Call) RunAndReturn(run func() repository.ConnectedItem) *GraphRepository_GetConnected_Call {
	_c.Call.Return(run)
	return _c
}

// GetDegreeDistribution provides a mock function with given fields:
func (_m *GraphRepository) GetDegreeDistribution() repository.DegreeDistributionItem {
	ret := _m.Called()

	var r0 repository.DegreeDistributionItem
	if rf, ok := ret.Get(0).(func() repository.DegreeDistributionItem); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(repository.DegreeDistributionItem)
	}

	return r0
}

// GraphRepository_GetDegreeDistribution_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDegreeDistribution'
type GraphRepository_GetDegreeDistribution_Call struct {
	*mock.Call
}

// GetDegreeDistribution is a helper method to define mock.On call
func (_e *GraphRepository_Expecter) GetDegreeDistribution() *GraphRepository_GetDegreeDistribution_Call {
	return &GraphRepository_GetDegreeDistribution_Call{Call: _e.mock.On("GetDegreeDistribution")}
}

func (_c *GraphRepository_GetDegreeDistribution_Call) Run(run func()) *GraphRepository_GetDegreeDistribution_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GraphRepository_GetDegreeDistribution_Call) Return(_a0 repository.DegreeDistributionItem) *GraphRepository_GetDegreeDistribution_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GraphRepository_GetDegreeDistribution_Call) RunAndReturn(run func() repository.DegreeDistributionItem) *GraphRepository_GetDegreeDistribution_Call {
	_c.Call.Return(run)
	return _c
}

// GetDensity provides a mock function with given fields:
func (_m *GraphRepository) GetDensity() repository.DensityItem {
	ret := _m.Called()

	var r0 repository.DensityItem
	if rf, ok := ret.Get(0).(func() repository.DensityItem); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(repository.DensityItem)
	}

	return r0
}

// GraphRepository_GetDensity_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetDensity'
type GraphRepository_GetDensity_Call struct {
	*mock.Call
}

// GetDensity is a helper method to define mock.On call
func (_e *GraphRepository_Expecter) GetDensity() *GraphRepository_GetDensity_Call {
	return &GraphRepository_GetDensity_Call{Call: _e.mock.On("GetDensity")}
}

func (_c *GraphRepository_GetDensity_Call) Run(run func()) *GraphRepository_GetDensity_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GraphRepository_GetDensity_Call) Return(_a0 repository.DensityItem) *GraphRepository_GetDensity_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GraphRepository_GetDensity_Call) RunAndReturn(run func() repository.DensityItem) *GraphRepository_GetDensity_Call {
	_c.Call.Return(run)
	return _c
}

// GetFullGraph provides a mock function with given fields:
func (_m *GraphRepository) GetFullGraph() repository.FullGraphItem {
	ret := _m.Called()

	var r0 repository.FullGraphItem
	if rf, ok := ret.Get(0).(func() repository.FullGraphItem); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(repository.FullGraphItem)
	}

	return r0
}

// GraphRepository_GetFullGraph_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetFullGraph'
type GraphRepository_GetFullGraph_Call struct {
	*mock.Call
}

// GetFullGraph is a helper method to define mock.On call
func (_e *GraphRepository_Expecter) GetFullGraph() *GraphRepository_GetFullGraph_Call {
	return &GraphRepository_GetFullGraph_Call{Call: _e.mock.On("GetFullGraph")}
}

func (_c *GraphRepository_GetFullGraph_Call) Run(run func()) *GraphRepository_GetFullGraph_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GraphRepository_GetFullGraph_Call) Return(_a0 repository.FullGraphItem) *GraphRepository_GetFullGraph_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GraphRepository_GetFullGraph_Call) RunAndReturn(run func() repository.FullGraphItem) *GraphRepository_GetFullGraph_Call {
	_c.Call.Return(run)
	return _c
}

// GetGeneralInformation provides a mock function with given fields:
func (_m *GraphRepository) GetGeneralInformation() repository.GeneralInformationItem {
	ret := _m.Called()

	var r0 repository.GeneralInformationItem
	if rf, ok := ret.Get(0).(func() repository.GeneralInformationItem); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(repository.GeneralInformationItem)
	}

	return r0
}

// GraphRepository_GetGeneralInformation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetGeneralInformation'
type GraphRepository_GetGeneralInformation_Call struct {
	*mock.Call
}

// GetGeneralInformation is a helper method to define mock.On call
func (_e *GraphRepository_Expecter) GetGeneralInformation() *GraphRepository_GetGeneralInformation_Call {
	return &GraphRepository_GetGeneralInformation_Call{Call: _e.mock.On("GetGeneralInformation")}
}

func (_c *GraphRepository_GetGeneralInformation_Call) Run(run func()) *GraphRepository_GetGeneralInformation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GraphRepository_GetGeneralInformation_Call) Return(_a0 repository.GeneralInformationItem) *GraphRepository_GetGeneralInformation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GraphRepository_GetGeneralInformation_Call) RunAndReturn(run func() repository.GeneralInformationItem) *GraphRepository_GetGeneralInformation_Call {
	_c.Call.Return(run)
	return _c
}

// GetLatestGraphName provides a mock function with given fields:
func (_m *GraphRepository) GetLatestGraphName() repository.GraphItem {
	ret := _m.Called()

	var r0 repository.GraphItem
	if rf, ok := ret.Get(0).(func() repository.GraphItem); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(repository.GraphItem)
	}

	return r0
}

// GraphRepository_GetLatestGraphName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLatestGraphName'
type GraphRepository_GetLatestGraphName_Call struct {
	*mock.Call
}

// GetLatestGraphName is a helper method to define mock.On call
func (_e *GraphRepository_Expecter) GetLatestGraphName() *GraphRepository_GetLatestGraphName_Call {
	return &GraphRepository_GetLatestGraphName_Call{Call: _e.mock.On("GetLatestGraphName")}
}

func (_c *GraphRepository_GetLatestGraphName_Call) Run(run func()) *GraphRepository_GetLatestGraphName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *GraphRepository_GetLatestGraphName_Call) Return(_a0 repository.GraphItem) *GraphRepository_GetLatestGraphName_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *GraphRepository_GetLatestGraphName_Call) RunAndReturn(run func() repository.GraphItem) *GraphRepository_GetLatestGraphName_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewGraphRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewGraphRepository creates a new instance of GraphRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGraphRepository(t mockConstructorTestingTNewGraphRepository) *GraphRepository {
	mock := &GraphRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
