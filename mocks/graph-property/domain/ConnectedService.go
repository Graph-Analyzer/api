// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	domain "graph-analyzer/api/graph-property/domain"

	mock "github.com/stretchr/testify/mock"
)

// ConnectedService is an autogenerated mock type for the ConnectedService type
type ConnectedService struct {
	mock.Mock
}

type ConnectedService_Expecter struct {
	mock *mock.Mock
}

func (_m *ConnectedService) EXPECT() *ConnectedService_Expecter {
	return &ConnectedService_Expecter{mock: &_m.Mock}
}

// Invoke provides a mock function with given fields:
func (_m *ConnectedService) Invoke() domain.ConnectedDTO {
	ret := _m.Called()

	var r0 domain.ConnectedDTO
	if rf, ok := ret.Get(0).(func() domain.ConnectedDTO); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(domain.ConnectedDTO)
	}

	return r0
}

// ConnectedService_Invoke_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Invoke'
type ConnectedService_Invoke_Call struct {
	*mock.Call
}

// Invoke is a helper method to define mock.On call
func (_e *ConnectedService_Expecter) Invoke() *ConnectedService_Invoke_Call {
	return &ConnectedService_Invoke_Call{Call: _e.mock.On("Invoke")}
}

func (_c *ConnectedService_Invoke_Call) Run(run func()) *ConnectedService_Invoke_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ConnectedService_Invoke_Call) Return(_a0 domain.ConnectedDTO) *ConnectedService_Invoke_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ConnectedService_Invoke_Call) RunAndReturn(run func() domain.ConnectedDTO) *ConnectedService_Invoke_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewConnectedService interface {
	mock.TestingT
	Cleanup(func())
}

// NewConnectedService creates a new instance of ConnectedService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewConnectedService(t mockConstructorTestingTNewConnectedService) *ConnectedService {
	mock := &ConnectedService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
