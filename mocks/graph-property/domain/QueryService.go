// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	domain "graph-analyzer/api/graph-property/domain"

	mock "github.com/stretchr/testify/mock"
)

// QueryService is an autogenerated mock type for the QueryService type
type QueryService struct {
	mock.Mock
}

type QueryService_Expecter struct {
	mock *mock.Mock
}

func (_m *QueryService) EXPECT() *QueryService_Expecter {
	return &QueryService_Expecter{mock: &_m.Mock}
}

// Invoke provides a mock function with given fields: queryType
func (_m *QueryService) Invoke(queryType string) domain.QueryDTO {
	ret := _m.Called(queryType)

	var r0 domain.QueryDTO
	if rf, ok := ret.Get(0).(func(string) domain.QueryDTO); ok {
		r0 = rf(queryType)
	} else {
		r0 = ret.Get(0).(domain.QueryDTO)
	}

	return r0
}

// QueryService_Invoke_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Invoke'
type QueryService_Invoke_Call struct {
	*mock.Call
}

// Invoke is a helper method to define mock.On call
//   - queryType string
func (_e *QueryService_Expecter) Invoke(queryType interface{}) *QueryService_Invoke_Call {
	return &QueryService_Invoke_Call{Call: _e.mock.On("Invoke", queryType)}
}

func (_c *QueryService_Invoke_Call) Run(run func(queryType string)) *QueryService_Invoke_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *QueryService_Invoke_Call) Return(_a0 domain.QueryDTO) *QueryService_Invoke_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *QueryService_Invoke_Call) RunAndReturn(run func(string) domain.QueryDTO) *QueryService_Invoke_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewQueryService interface {
	mock.TestingT
	Cleanup(func())
}

// NewQueryService creates a new instance of QueryService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewQueryService(t mockConstructorTestingTNewQueryService) *QueryService {
	mock := &QueryService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
