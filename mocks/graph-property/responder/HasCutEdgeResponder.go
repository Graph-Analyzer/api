// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	domain "graph-analyzer/api/graph-property/domain"

	mock "github.com/stretchr/testify/mock"
)

// HasCutEdgeResponder is an autogenerated mock type for the HasCutEdgeResponder type
type HasCutEdgeResponder struct {
	mock.Mock
}

type HasCutEdgeResponder_Expecter struct {
	mock *mock.Mock
}

func (_m *HasCutEdgeResponder) EXPECT() *HasCutEdgeResponder_Expecter {
	return &HasCutEdgeResponder_Expecter{mock: &_m.Mock}
}

// CreateSuccessfulResponse provides a mock function with given fields: dto
func (_m *HasCutEdgeResponder) CreateSuccessfulResponse(dto domain.HasCutEdgeDTO) {
	_m.Called(dto)
}

// HasCutEdgeResponder_CreateSuccessfulResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSuccessfulResponse'
type HasCutEdgeResponder_CreateSuccessfulResponse_Call struct {
	*mock.Call
}

// CreateSuccessfulResponse is a helper method to define mock.On call
//   - dto domain.HasCutEdgeDTO
func (_e *HasCutEdgeResponder_Expecter) CreateSuccessfulResponse(dto interface{}) *HasCutEdgeResponder_CreateSuccessfulResponse_Call {
	return &HasCutEdgeResponder_CreateSuccessfulResponse_Call{Call: _e.mock.On("CreateSuccessfulResponse", dto)}
}

func (_c *HasCutEdgeResponder_CreateSuccessfulResponse_Call) Run(run func(dto domain.HasCutEdgeDTO)) *HasCutEdgeResponder_CreateSuccessfulResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.HasCutEdgeDTO))
	})
	return _c
}

func (_c *HasCutEdgeResponder_CreateSuccessfulResponse_Call) Return() *HasCutEdgeResponder_CreateSuccessfulResponse_Call {
	_c.Call.Return()
	return _c
}

func (_c *HasCutEdgeResponder_CreateSuccessfulResponse_Call) RunAndReturn(run func(domain.HasCutEdgeDTO)) *HasCutEdgeResponder_CreateSuccessfulResponse_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewHasCutEdgeResponder interface {
	mock.TestingT
	Cleanup(func())
}

// NewHasCutEdgeResponder creates a new instance of HasCutEdgeResponder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewHasCutEdgeResponder(t mockConstructorTestingTNewHasCutEdgeResponder) *HasCutEdgeResponder {
	mock := &HasCutEdgeResponder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
