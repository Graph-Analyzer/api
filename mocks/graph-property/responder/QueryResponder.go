// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	domain "graph-analyzer/api/graph-property/domain"

	mock "github.com/stretchr/testify/mock"
)

// QueryResponder is an autogenerated mock type for the QueryResponder type
type QueryResponder struct {
	mock.Mock
}

type QueryResponder_Expecter struct {
	mock *mock.Mock
}

func (_m *QueryResponder) EXPECT() *QueryResponder_Expecter {
	return &QueryResponder_Expecter{mock: &_m.Mock}
}

// CreateSuccessfulResponse provides a mock function with given fields: _a0
func (_m *QueryResponder) CreateSuccessfulResponse(_a0 domain.QueryDTO) {
	_m.Called(_a0)
}

// QueryResponder_CreateSuccessfulResponse_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSuccessfulResponse'
type QueryResponder_CreateSuccessfulResponse_Call struct {
	*mock.Call
}

// CreateSuccessfulResponse is a helper method to define mock.On call
//   - _a0 domain.QueryDTO
func (_e *QueryResponder_Expecter) CreateSuccessfulResponse(_a0 interface{}) *QueryResponder_CreateSuccessfulResponse_Call {
	return &QueryResponder_CreateSuccessfulResponse_Call{Call: _e.mock.On("CreateSuccessfulResponse", _a0)}
}

func (_c *QueryResponder_CreateSuccessfulResponse_Call) Run(run func(_a0 domain.QueryDTO)) *QueryResponder_CreateSuccessfulResponse_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(domain.QueryDTO))
	})
	return _c
}

func (_c *QueryResponder_CreateSuccessfulResponse_Call) Return() *QueryResponder_CreateSuccessfulResponse_Call {
	_c.Call.Return()
	return _c
}

func (_c *QueryResponder_CreateSuccessfulResponse_Call) RunAndReturn(run func(domain.QueryDTO)) *QueryResponder_CreateSuccessfulResponse_Call {
	_c.Call.Return(run)
	return _c
}

type mockConstructorTestingTNewQueryResponder interface {
	mock.TestingT
	Cleanup(func())
}

// NewQueryResponder creates a new instance of QueryResponder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewQueryResponder(t mockConstructorTestingTNewQueryResponder) *QueryResponder {
	mock := &QueryResponder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
